/**
 * Example class demonstrating basic object-oriented concepts
 */
function ExampleClass(param1, param2, param3, param4) {
	//this.property1 = 1;
	//this.property2 = new array();
	//this.property2[0] = 1;
	//this.property2[1] = 2;
}

var instance = new ExampleClass();

// Self-executing function demonstrating closure
(function (x, y, z) {
	return x + y * z;
})(1, 2, 3);

// Boolean condition demonstration
if (1) {
	println("Condition evaluates to true");
}

println(instance.a);

// If-else condition demonstration
if (0) {
	println("Zero evaluates to false");
} else {
	println("Zero evaluates to false");
}

/**
 * Calculate factorial recursively
 * @param {number} n - Input number
 * @returns {number} Factorial of input number
 */
function factorial(n) {
	if (n == 0) {
		return 1;
	} else {
		return factorial(n - 1) * n;
	}
}

println(factorial(5));

// Loop demonstration with break
for(var counter = 0; counter < 2; counter) {
	break;
}

/**
 * Function demonstrating exception handling
 */
function demonstrateException() {
	println("Executing code before exception");
	throw "An error occurred during execution";
	println("This line should not be executed");
}

// Exception handling demonstration
try {
	demonstrateException();
	println("This line should not be executed");
} catch (error) {
	System.out.println("Exception caught: " + error.toString());
}

println("Program execution completed");