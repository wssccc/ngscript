// a coroutine function
function f(a,b,c) {
      println("first = " + a);
      // call yield to switch to previous context
      // with a return value
      yield(1);
      // coroutine will resume here
      println("second = " + b);
      println("third = " + c);
}

// start a coroutine
var co = new Coroutine(f, "param 1", "param 2", "param 3");
// push args, in the old-fashioned way
// co.push("p1");
// co.push("p2");

println("coroutine status=" + co.status());
// call resume to switch to coroutine
// and get the return value
println("resume 1 = " + co.resume());
println("coroutine status=" + co.status());
// the second resume has nothing returned
println("resume 2 = " + co.resume());
println("coroutine status=" + co.status());
// don't resume a `returned` coroutine
try {
      println("resume 3:");
      println(co.resume());
} catch(e) {
      println("can't resume a returned coroutine");
}