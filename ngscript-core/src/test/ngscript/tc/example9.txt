/**
 * Example demonstrating coroutine interaction between two functions
 * This shows how two coroutines can yield control to each other
 */

function producerCoroutine(consumer) {
    println("[Producer] Starting execution");
    println("[Producer] Processing first batch");
    consumer.resume();
    println("[Producer] Processing second batch");
    consumer.resume();
    println("[Producer] Execution completed");
}

function consumerCoroutine(producer) {
    println("[Consumer] Starting execution");
    println("[Consumer] Processing first batch");
    producer.resume();
    println("[Consumer] Processing second batch");
    println("[Consumer] Execution completed");
}

// Create coroutine instances
var producer = new Coroutine(producerCoroutine);
var consumer = new Coroutine(consumerCoroutine);

// Initialize coroutines with references to each other
producer.invoke(consumer);
consumer.invoke(producer);

// Main execution completed
println("Program execution finished");