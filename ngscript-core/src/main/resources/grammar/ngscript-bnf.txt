//starter symbol
%start <program>;
%array <statements> <param_list> <params> <package_path>;
%equiv  <expr> <expr1> <expr2> <expr3> <expr4> <expr5>
        <expr6> <expr7> <expr8> <nullable_expr>
        <expr_bit_or> <expr_bit_xor> <expr_bit_and> <expr_cond>
        <expr9> <expr_class> <expr10>;
%filter semicolon comma;

<program> ::= <statements>;
//----------------------------------------------------------------------------
//statements is a collection of statement;

<statements> ::= NULL;
<statements> ::= <statement> <statements>;

//----------------------------------------------------------------------------
//statement forms
%equiv <statement> <flow_statement> <expr_statement> <fc_statement>;

<statement> ::= semicolon;
<statement> ::= <flow_statement>;
<statement> ::= <expr_statement>;
<statement> ::= <fc_statement>;
<statement> ::= <throw_exception>;
<statement> ::= <import_statement>;

<import_statement> ::= import <package_path> semicolon;
<package_path> ::= ident dot <package_path>;
<package_path> ::= ident;

<flow_statement> ::= <function_decl>;
<flow_statement> ::= <if_block>;
<flow_statement> ::= <for_block>;
<flow_statement> ::= <if_else_block>;
<flow_statement> ::= <while_block>;
<flow_statement> ::= <try_block>;
<flow_statement> ::= <switch_block>;

<expr_statement> ::= <expr> semicolon;
<throw_exception> ::= throw <expr> semicolon => <expr>;

<fc_statement> ::= <return_val>;
<fc_statement> ::= <return_void>;
<fc_statement> ::= break semicolon;
<fc_statement> ::= continue semicolon;

<return_val> ::= return <expr> semicolon => <expr>;
<return_void> ::= return semicolon;


//error handling
//<statement> ::= ERROR semicolon;

//----------------------------------------------------------------------------
//details of function declaration

<function_decl> ::= function ident lparen <param_list> rparen lcurly <statements> rcurly
    =>    ident <param_list> <statements>;
<param_list> ::= ident comma <param_list>;
<param_list> ::= ident;
<param_list> ::= NULL;
//----------------------------------------------------------------------------
//details of if block and else

<if_block> ::= if lparen <expr> rparen lcurly <statements> rcurly
    => <expr> <statements> ;
<if_else_block> ::= if lparen <expr> rparen lcurly <statements> rcurly else lcurly <statements> rcurly 
    => <expr> <statements> <statements>;

//----------------------------------------------------------------------------
//details of expr

//add more += -= *= /= %=
<expr> ::= <expr> assign <expr_cond>                => assign <expr> <expr_cond>;
<expr> ::= <expr_cond> ;

<expr_cond> ::= <expr_cond> question_mark <expr1> colon <expr1>
    => cond <expr_cond> <expr1> <expr1>;
    
<expr_cond> ::= <expr1> ;

<expr1> ::= <expr1> or <expr2>                  => or <expr1> <expr2>;
<expr1> ::= <expr2>;

<expr2> ::= <expr2> and <expr_bit_or>                 => and <expr2> <expr_bit_or>;
<expr2> ::= <expr_bit_or>;

<expr_bit_or> ::= <expr_bit_or> bit_or <expr_bit_xor>                 => bit_or <expr_bit_or> <expr_bit_xor>;
<expr_bit_or> ::= <expr_bit_xor>;

<expr_bit_xor> ::= <expr_bit_xor> bit_xor <expr_bit_and>                 => bit_xor <expr_bit_xor> <expr_bit_and>;
<expr_bit_xor> ::= <expr_bit_and>;

<expr_bit_and> ::= <expr_bit_and> bit_and <expr3>                 => bit_and <expr_bit_and> <expr3>;
<expr_bit_and> ::= <expr3>;

<expr3> ::= <expr3> eq <expr4>                  => eq <expr3> <expr4>;
<expr3> ::= <expr3> veq <expr4>                  => veq <expr3> <expr4>;
<expr3> ::= <expr3> neq <expr4>                 => neq <expr3> <expr4>;
<expr3> ::= <expr3> vneq <expr4>                 => vneq <expr3> <expr4>;
<expr3> ::= <expr4>;

<expr4> ::= <expr4> gt <expr5>                  => gt <expr4> <expr5>;
<expr4> ::= <expr4> lt <expr5>                  => lt <expr4> <expr5>;
<expr4> ::= <expr4> ge <expr5>                  => ge <expr4> <expr5>;
<expr4> ::= <expr4> le <expr5>                  => le <expr4> <expr5>;
<expr4> ::= <expr5>;

<expr5> ::= <expr5> add <expr6>                 => add <expr5> <expr6>;
<expr5> ::= <expr5> sub <expr6>                 => sub <expr5> <expr6>;
<expr5> ::= <expr6>;

<expr6> ::= <expr6> mul <expr7>                 => mul <expr6> <expr7>;
<expr6> ::= <expr6> div <expr7>                 => div <expr6> <expr7>;
<expr6> ::= <expr6> mod <expr7>                 => mod <expr6> <expr7>;
<expr6> ::= <expr7>;

<expr7> ::= sub <expr8>     => neg <expr8>;
<expr7> ::= not <expr8>;
<expr7> ::= typeof <expr8>;

<expr7> ::= inc <expr8>;
<expr7> ::= dec <expr8>;
<expr7> ::= <expr8> inc => post_inc <expr8>;
<expr7> ::= <expr8> dec => post_dec <expr8>;
<expr7> ::= <expr8>;

<expr8> ::= lparen <expr> rparen                => <expr>;

<expr8> ::= new <expr_class> lparen <params> rparen  => new <expr_class> <params>;
    <expr_class> ::= <expr_class> dot ident => dot <expr_class> ident;
    <expr_class> ::= <expr9> ;

<expr8> ::= <expr8> dot ident                   => dot <expr8> ident;

<expr8> ::= <expr8> lparen <params> rparen      => funcall <expr8> <params>;
<params> ::= <expr> comma <params>;
<params> ::= <expr> ;
<params> ::= NULL;

<expr8> ::= <expr8> lsqr <expr> rsqr            => array <expr8> <expr>;

<expr8> ::= <expr9> ;

//literals
<expr9> ::= var ident;
<expr9> ::= val ident;
<expr9> ::= ident;
<expr9> ::= undefined;
<expr9> ::= double;
<expr9> ::= null;
<expr9> ::= true;
<expr9> ::= false;
<expr9> ::= integer;
<expr9> ::= string;
<expr9> ::= function lparen <param_list> rparen lcurly <statements> rcurly
    => lambda <param_list> <statements>;

//array literal
<expr9> ::= lsqr <array_items> rsqr => array_new <array_items>;
%array <array_items>;
<array_items> ::= <expr> comma <array_items>;
<array_items> ::= <expr> ;
<array_items> ::= NULL ;

//object literal
%array <kvps>;
<expr9> ::= lcurly <kvps> rcurly    => object_new <kvps>;
<kvps> ::= NULL ;
<kvps> ::= <kvp> ;
<kvps> ::= <kvp> comma <kvps>;

<kvp> ::= ident colon <expr>    => ident <expr>;
<kvp> ::= string colon <expr> => string <expr>;

<expr9> ::= <expr10> ;

<expr10> ::= lparen <param_list> rparen_arrow_fn lcurly <statements> rcurly
    => lambda <param_list> <statements>;

<for_block> ::= for lparen <nullable_expr> semicolon <nullable_expr> semicolon <nullable_expr> rparen lcurly <statements> rcurly
    => <nullable_expr> <nullable_expr> <nullable_expr> <statements>;

<nullable_expr> ::= <expr>;
<nullable_expr> ::= NULL;

<while_block> ::= while lparen <expr> rparen lcurly <statements> rcurly
    => <expr> <statements>;
    
<try_block> ::= try lcurly <hooked_statements> rcurly catch lparen ident rparen
    lcurly <hooked_statements> rcurly finally lcurly <statements> rcurly
    => <hooked_statements> ident <hooked_statements> <statements>;

<try_block> ::= try lcurly <hooked_statements> rcurly catch lparen ident rparen
    lcurly <hooked_statements> rcurly
    => <hooked_statements> ident <hooked_statements>;

%equiv <statements> <hooked_statements>;

<hooked_statements> ::= <hooked_statement> <hooked_statements>;
<hooked_statements> ::= NULL;

%equiv <statement> <hooked_statement> <hooked_fc_statement>;

<hooked_statement> ::= <flow_statement>;
<hooked_statement> ::= <expr_statement>;
<hooked_statement> ::= <hooked_fc_statement>;
<hooked_statement> ::= <throw_exception>;

<hooked_fc_statement> ::= <hooked_return_val>;
<hooked_fc_statement> ::= <hooked_return_void>;
<hooked_fc_statement> ::= <hooked_break>;
<hooked_fc_statement> ::= <hooked_continue>;

<hooked_return_val> ::= return <expr> semicolon => <expr>;
<hooked_return_void> ::= return semicolon;
<hooked_break> ::= break semicolon;
<hooked_continue> ::= continue semicolon;


<switch_block> ::= switch lparen <expr> rparen lcurly <switch_cases> <default_case> rcurly
    => <expr> <switch_cases> <default_case>;

<switch_block> ::= switch lparen <expr> rparen lcurly <switch_cases> rcurly
    => <expr> <switch_cases>;

%array <switch_cases>;

<switch_cases> ::= <switch_case> <switch_cases>;
<switch_cases> ::= NULL;

<switch_case> ::= case <expr> colon <statements>
    => <expr> <statements>;
<default_case> ::= default colon <statements>
    => <statements>;